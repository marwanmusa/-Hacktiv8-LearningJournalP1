# -*- coding: utf-8 -*-
"""GridSearchCV.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12Y-eHCJqP0r92PCy1vhdgH1vEN0YzFC1

##**Cross validation**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("https://raw.githubusercontent.com/DianCA26/Dataset/main/CarPrice_Assignment.csv")

X = df[['horsepower','wheelbase','enginesize','boreratio','compressionratio','highwaympg','citympg','curbweight','carwidth','carlength']]
y = df['price']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=26)

from sklearn.svm import SVR
model = SVR(kernel="poly", degree=3,C=1000,epsilon=0.01)

from sklearn.model_selection import cross_val_score
scores = cross_val_score(model, X_train, y_train, cv=5)

scores

scores.mean()

scores.std()

scores.mean()+scores.std()

scores.mean()-scores.std()

"""##**GridSearch**"""

from sklearn.model_selection import GridSearchCV

param_grid = [{'kernel': ['rbf'],
               'C': [0.001, 0.01, 0.1, 1, 10, 100],
               'gamma': [0.001, 0.01, 0.1, 1, 10, 100]},
              {'kernel': ['linear'],
               'C': [0.001, 0.01, 0.1, 1, 10, 100]},
              {'kernel': ['poly'],
               'degree': [2,3,4,5,6,7,8],
               'epsilon': [0.01, 0.02, 0.05, 1, 10, 100, 1000],
               'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000, 10000, 100000]}]

grid_search = GridSearchCV(SVR(), param_grid, cv=5, scoring="r2")

grid_search.fit(X_train, y_train)
print("Best parameters: {}".format(grid_search.best_params_))
print("Best cross-validation score: {:.2f}".format(grid_search.best_score_))

param_new=grid_search.best_estimator_

param_new

y_train_pred=param_new.predict(X_train)
y_test_pred=param_new.predict(X_test)

from sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score

print('MAE train = ', mean_absolute_error(y_train, y_train_pred))
print('MAE test = ', mean_absolute_error(y_test, y_test_pred))

print('MSE train = ', mean_squared_error(y_train, y_train_pred))
print('MSE test = ', mean_squared_error(y_test, y_test_pred))

print('RMSE train = ', np.sqrt(mean_squared_error(y_train, y_train_pred)))
print('RMSE test = ', np.sqrt(mean_squared_error(y_test, y_test_pred)))

print('r2score train = ', r2_score(y_train, y_train_pred))
print('r2score test = ', r2_score(y_test, y_test_pred))

from sklearn.compose import ColumnTransformer

from sklearn.pipeline import Pipeline

from sklearn.preprocessing import StandardScaler, MinMaxScaler

numeric_features = ["horsepower","wheelbase","enginesize","boreratio","compressionratio"]
numeric_features2 = ["highwaympg","citympg","curbweight","carwidth","carlength"]

numeric_transformer_mms = Pipeline([("scaler", MinMaxScaler())])

numeric_transformer_sc = Pipeline([("scaler2", StandardScaler())])

preprocessor = ColumnTransformer(
    transformers=[
        ("num1", numeric_transformer_mms, numeric_features),
        ("num2", numeric_transformer_sc, numeric_features2),
    ]
)

pipe = Pipeline([("prep", preprocessor), ("svr", SVR(kernel='poly',degree=2,C=1000,epsilon=0.01))])
pipe.fit(X_train,y_train)

y_train_pred=pipe.predict(X_train)
y_test_pred=pipe.predict(X_test)

print('MAE train = ', mean_absolute_error(y_train, y_train_pred))
print('MAE test = ', mean_absolute_error(y_test, y_test_pred))

print('MSE train = ', mean_squared_error(y_train, y_train_pred))
print('MSE test = ', mean_squared_error(y_test, y_test_pred))

print('RMSE train = ', np.sqrt(mean_squared_error(y_train, y_train_pred)))
print('RMSE test = ', np.sqrt(mean_squared_error(y_test, y_test_pred)))

print('r2score train = ', r2_score(y_train, y_train_pred))
print('r2score test = ', r2_score(y_test, y_test_pred))

param=[{'svr__kernel': ['poly'],
               'svr__degree': [2,3,4],
               'svr__epsilon': [0.01],
               'svr__C': [1000]}]

grid_search = GridSearchCV(pipe, param_grid=param, cv=5, scoring="r2")

grid_search.fit(X_train,y_train)

best=grid_search.best_estimator_

y_train_pred=grid_search.best_estimator_.predict(X_train)
y_test_pred=grid_search.best_estimator_.predict(X_test)

print('MAE train = ', mean_absolute_error(y_train, y_train_pred))
print('MAE test = ', mean_absolute_error(y_test, y_test_pred))

print('MSE train = ', mean_squared_error(y_train, y_train_pred))
print('MSE test = ', mean_squared_error(y_test, y_test_pred))

print('RMSE train = ', np.sqrt(mean_squared_error(y_train, y_train_pred)))
print('RMSE test = ', np.sqrt(mean_squared_error(y_test, y_test_pred)))

print('r2score train = ', r2_score(y_train, y_train_pred))
print('r2score test = ', r2_score(y_test, y_test_pred))