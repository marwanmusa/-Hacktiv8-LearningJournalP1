# -*- coding: utf-8 -*-
"""SVM_tambahan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ommACzYqfuIe2iWiG_ww3CJYMVcYvbVv
"""

import pandas as pd
import numpy as np
from sklearn import datasets
from sklearn.svm import SVC
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split

iris = datasets.load_iris()
X = iris["data"][:, (2, 3)]  
y = iris["target"]

setosa_or_versicolor = (y == 0) | (y == 1)
X = X[setosa_or_versicolor]
y = y[setosa_or_versicolor]
X=pd.DataFrame(X)
y=pd.DataFrame(y)
y.rename(columns = {0 : 'label'}, inplace = True)
X.rename(columns = {0 : 'x1',1 : 'x2'}, inplace = True)
df=pd.concat([X,y],axis=1)

X

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=17)
print(X_test.shape)
print(X_train.shape)
print(df.shape)

"""RBF"""

mod_SVM=SVC(kernel='rbf',C=1,degree=2,coef0=1)
mod_SVM.fit(X_train,y_train)

y_pred=mod_SVM.predict(X_test)

y_pred

print(classification_report(y_test,y_pred))

"""Linear"""

mod_SVM=SVC(kernel='linear',C=1)
mod_SVM.fit(X_train,y_train)

y_pred=mod_SVM.predict(X_test)

y_pred

print(classification_report(y_test,y_pred))

"""Regresi-SVM"""

df = pd.read_csv("https://raw.githubusercontent.com/DianCA26/Dataset/main/CarPrice_Assignment.csv")

from sklearn.svm import SVR
from sklearn.svm import LinearSVR
from sklearn.preprocessing import MinMaxScaler, StandardScaler

df.head()

X = df[['horsepower','wheelbase','enginesize','boreratio','compressionratio','highwaympg','citympg','curbweight','carwidth','carlength']]
y = df['price']

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=26)
print(X_test.shape)
print(X_train.shape)
print(X.shape)

sc=MinMaxScaler()
sc.fit(X_train)
X_train_scaled=sc.transform(X_train)
X_test_scaled=sc.transform(X_test)

svm_reg = SVR(kernel="poly", degree=2, C=1000, epsilon=0.1, gamma="scale")
svm_reg.fit(X_train_scaled, y_train)
y_pred_train=svm_reg.predict(X_train_scaled)
y_pred_test=svm_reg.predict(X_test_scaled)

from sklearn.metrics import mean_absolute_error,mean_squared_error,r2_score

print('MAE train = ', mean_absolute_error(y_train, y_pred_train))
print('MAE test = ', mean_absolute_error(y_test, y_pred_test))

print('MSE train = ', mean_squared_error(y_train, y_pred_train))
print('MSE test = ', mean_squared_error(y_test, y_pred_test))

print('RMSE train = ', np.sqrt(mean_squared_error(y_train, y_pred_train)))
print('RMSE test = ', np.sqrt(mean_squared_error(y_test, y_pred_test)))

print('r2score train = ', r2_score(y_train, y_pred_train))
print('r2score test = ', r2_score(y_test, y_pred_test))

svm_reg2 = SVR(kernel="poly", degree=2, C=0.01, epsilon=0.1, gamma="scale")
svm_reg2.fit(X_train_scaled, y_train)
y_pred_train=svm_reg2.predict(X_train_scaled)
y_pred_test=svm_reg2.predict(X_test_scaled)

print('MAE train = ', mean_absolute_error(y_train, y_pred_train))
print('MAE test = ', mean_absolute_error(y_test, y_pred_test))

print('MSE train = ', mean_squared_error(y_train, y_pred_train))
print('MSE test = ', mean_squared_error(y_test, y_pred_test))

print('RMSE train = ', np.sqrt(mean_squared_error(y_train, y_pred_train)))
print('RMSE test = ', np.sqrt(mean_squared_error(y_test, y_pred_test)))

print('r2score train = ', r2_score(y_train, y_pred_train))
print('r2score test = ', r2_score(y_test, y_pred_test))

mod_SVR=SVR(kernel='linear', epsilon=0.5)
mod_SVR.fit(X_train_scaled,y_train)

y_pred_train=mod_SVR.predict(X_train_scaled)
y_pred_test=mod_SVR.predict(X_test_scaled)

print('MAE train = ', mean_absolute_error(y_train, y_pred_train))
print('MAE test = ', mean_absolute_error(y_test, y_pred_test))

print('MSE train = ', mean_squared_error(y_train, y_pred_train))
print('MSE test = ', mean_squared_error(y_test, y_pred_test))

print('RMSE train = ', np.sqrt(mean_squared_error(y_train, y_pred_train)))
print('RMSE test = ', np.sqrt(mean_squared_error(y_test, y_pred_test)))

print('r2score train = ', r2_score(y_train, y_pred_train))
print('r2score test = ', r2_score(y_test, y_pred_test))

mod_SVR=SVR()
mod_SVR.fit(X_train,y_train)

y_pred_train=mod_SVR.predict(X_train)
y_pred_test=mod_SVR.predict(X_test)

print('MAE train = ', mean_absolute_error(y_train, y_pred_train))
print('MAE test = ', mean_absolute_error(y_test, y_pred_test))

print('MSE train = ', mean_squared_error(y_train, y_pred_train))
print('MSE test = ', mean_squared_error(y_test, y_pred_test))

print('RMSE train = ', np.sqrt(mean_squared_error(y_train, y_pred_train)))
print('RMSE test = ', np.sqrt(mean_squared_error(y_test, y_pred_test)))

print('r2score train = ', r2_score(y_train, y_pred_train))
print('r2score test = ', r2_score(y_test, y_pred_test))