# -*- coding: utf-8 -*-
"""Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-xVcDK-nA8z5LEyuDO14wvtfh3FbNb9x
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
import seaborn as sns
from sklearn.metrics import silhouette_score
from sklearn.metrics import silhouette_samples
from yellowbrick.cluster import KElbowVisualizer
from sklearn.cluster import KMeans, AgglomerativeClustering, SpectralClustering, DBSCAN
import matplotlib as mpl
from matplotlib.ticker import FixedLocator, FixedFormatter

"""sumber https://www.kaggle.com/heeraldedhia/kmeans-clustering-for-customer-data"""

df=pd.read_csv('https://raw.githubusercontent.com/DianCA26/Dataset/main/segmented_customers.csv')

df.head()

df.drop(["CustomerID","cluster","Gender"], axis=1, inplace=True)

X=np.array(df)

scaler = StandardScaler()
scaler.fit(X)
X_scaled=scaler.transform(X)

"""Visualisasi X ke dalam 2D"""

pca_2d = PCA(n_components=2, random_state=26)
X_2d  = pca_2d.fit_transform(X_scaled)

plt.figure(figsize=(18, 5))
sns.scatterplot(x=X_2d[:, 0], y=X_2d[:, 1])
plt.xlabel('PC1')
plt.ylabel('PC2')
plt.title('PCA with 2 components')
plt.show()

kmeans_per_k = [KMeans(n_clusters=k, random_state=26).fit(X_scaled)
                for k in range(1, 9)]

print('Elbow Method')
Elbow_M = KElbowVisualizer(KMeans(), k=9)
Elbow_M.fit(X_scaled)
Elbow_M.show()

k=[2,3,4,5,6,7,8,9]
kmeans_per_k = [KMeans(n_clusters=k, random_state=42).fit(X_scaled)
                for k in range(1, 9)]
inertias = [model.inertia_ for model in kmeans_per_k]

silhouette_scores = [silhouette_score(X_scaled, model.labels_)
                     for model in kmeans_per_k[1:]]

plt.figure(figsize=(11, 9))

for k in (2, 3, 4, 5, 6):
    plt.subplot(3, 2, k - 1)
    
    y_pred = kmeans_per_k[k - 1].labels_
    silhouette_coefficients = silhouette_samples(X_scaled, y_pred)

    padding = len(X_scaled) // 30
    pos = padding
    ticks = []
    for i in range(k):
        coeffs = silhouette_coefficients[y_pred == i]
        coeffs.sort()

        color = mpl.cm.Spectral(i / k)
        plt.fill_betweenx(np.arange(pos, pos + len(coeffs)), 0, coeffs,
                          facecolor=color, edgecolor=color, alpha=0.7)
        ticks.append(pos + len(coeffs) // 2)
        pos += len(coeffs) + padding

    plt.gca().yaxis.set_major_locator(FixedLocator(ticks))
    plt.gca().yaxis.set_major_formatter(FixedFormatter(range(k)))
    if k in (3, 5):
        plt.ylabel("Cluster")
    
    if k in (5, 6):
        plt.gca().set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])
        plt.xlabel("Silhouette Coefficient")
    else:
        plt.tick_params(labelbottom=False)

    plt.axvline(x=silhouette_scores[k - 2], color="red", linestyle="--")
    plt.title("$k={}$".format(k), fontsize=16)

plt.show()

"""**KMeans**"""

kmeans = KMeans(n_clusters=2, random_state=26)
kmeans.fit(X_scaled)

plt.figure(figsize=(18, 5))
sns.scatterplot(x=X_2d[:, 0], y=X_2d[:, 1], hue=kmeans.labels_, palette='Set1')
plt.xlabel('PC1')
plt.ylabel('PC2')
plt.title('KMeans Clusters')
plt.show()

X_cluster1 = df.copy()
X_cluster1['cluster'] = kmeans.labels_
X_cluster1.head()

"""EDA untuk Kmeans"""

plt.figure(figsize=(4, 5))
sns.countplot(data=X_cluster1, x='cluster', palette='Set1')
plt.title('Cluster Distribution')
plt.show()

"""**Agglomerative**"""

agglo = AgglomerativeClustering(n_clusters=2)
agglo.fit(X_scaled)

X_cluster2 = df.copy()
X_cluster2['cluster'] = agglo.labels_
X_cluster2.head()

plt.figure(figsize=(4, 5))
sns.countplot(data=X_cluster2, x='cluster', palette='Set1')
plt.title('Cluster Distribution')
plt.show()

"""**Spectral**"""

spectral = SpectralClustering(n_clusters=2, random_state=26)
spectral.fit(X_scaled)

X_cluster3 = df.copy()
X_cluster3['cluster'] = spectral.labels_
X_cluster3.head()

plt.figure(figsize=(4, 5))
sns.countplot(data=X_cluster3, x='cluster', palette='Set1')
plt.title('Cluster Distribution')
plt.show()

"""DBSCAN"""

DBsc = DBSCAN(eps=1.5, min_samples=4)
DBsc.fit(X_scaled)

X_cluster4 = df.copy()
X_cluster4['cluster'] = DBsc.labels_
X_cluster4.head()

plt.figure(figsize=(4, 5))
sns.countplot(data=X_cluster4, x='cluster', palette='Set1')
plt.title('Cluster Distribution')
plt.show()